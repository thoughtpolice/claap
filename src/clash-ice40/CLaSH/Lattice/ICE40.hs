{-# LANGUAGE TemplateHaskell #-}

-- |
-- Module      : CLaSH.Lattice.ICE40
-- Copyright   : (c) Austin Seipp 2016
-- License     : MIT
--
-- Maintainer  : aseipp@pobox.com
-- Stability   : experimental
-- Portability : portable
--
-- This module provides Phase Lock Loop (PLL) @'ClockSource'@s for the Lattice
-- iCE40 FPGA series, including the iCE40-HX8K (\"Breakout Board\") and
-- iCE40-HX1K (\"IceStick\"). This allows you to tie your @topEntity@
-- declarations to the on-board PLLs, and set them to a specific operating
-- frequency, beyond the on-board clock.
--
-- Furthermore, the Lattice iCE40 series is unique in that it supports a
-- completely open source synthesis flow, consisting of Yosys, Arachne-pnr, and
-- IceStorm for verilog synthesis, place-and-route, and board upload/design
-- timing analysis. Along with the low cost of iCE40 boards, this makes Lattice
-- FPGAs uniquely attractive and low-overhead educational purposes.
--
module CLaSH.Lattice.ICE40
  ( ICE40Reset   -- :: *
  , ICE40PLL(..) -- :: *
  , ice40pll     -- :: ICE40PLL -> String -> ClockSource

    -- * Utilities for generating necessary accompanying verilog code
  , printPllVerilog
  ) where
import CLaSH.Prelude
import CLaSH.Signal.Explicit (systemClock)

import Data.FileEmbed (embedStringFile)

-- | Reset wire for the iCE40 PLL. If you do not require a reset wire to be
-- hooked up to the PLL, you can simply set this to either @1'b1@ for
-- (System)Verilog or @\'1\'@ for VHDL.
--
-- Note: while other systems like Altera PLLs use active /high/ reset for these
-- signals, the iCE40 PLL uses active /low/ reset. Thus, to reset, you would
-- change the reset wire from high (1) to low (0), not low to high. This is also
-- why you should default to 1 if you don't need the reset wire, as specified
-- above.
type ICE40Reset = String

-- | iCE40 PLL speed setting. This determines the frequency of the output clock
-- generated by the PLL, after it has been wired to the on-board 12Mhz
-- oscillator.
--
-- Note that currently, the set of output clock frequencies for the PLL is fixed
-- and non-extensible by the user in any form, due to some limitations in the
-- current version of CLaSH. In the future it will hopefully be possible, in
-- combination with the @icepll@ tool (among other things), to allow
-- user-configurable frequency.
--
-- The minimum clock frequency supported by the PLL is 16mhz.
data ICE40PLL
  = PLL_16MHZ
  -- ^ 16mhz output (16,000,000 cycles per second). This is the /lower/ bound of
  -- the PLL: it cannot reach a frequency lower than this given the input clock
  -- on the iCE40.

  | PLL_50MHZ
  -- ^ 50mhz output (50,000,000 cycles per second).

  | PLL_60MHZ
  -- ^ 60mhz output (60,000,000 cycles per second).

  | PLL_100MHZ
  -- ^ 100mhz output (100,000,000 cycles per second).

  | PLL_120MHZ
  -- ^ 120mhz output (120,000,000 cycles per second).

  | PLL_200MHZ
  -- ^ 200mhz output (200,000,000 cycles per second).

  | PLL_270MHZ
  -- ^ 270mhz output (270,000,000 cycles per second). This is the /upper/ bound
  -- of the PLL. Note that the iCE40 itself claims that the PLL may support
  -- up-to 275 megahertz; this 5mhz gap is merely a 'red zone' providing a
  -- small, comfortable gap before hitting max speed.

-- | A configurable PLL-based @'ClockSource'@ for designs intending to be
-- synthesized onto Lattice iCE40 boards. Intended to be used along with
-- @'TopEntity'@'s @t_clocks@ field.
ice40pll :: ICE40Reset  -- ^ Optional reset signal as input to the PLL.
         -> ICE40PLL    -- ^ The speed of the resulting PLL clock.
         -> String      -- ^ The name of the input wire this clock is tied to.
                        -- Traditionally, this is the name of some wire
                        -- that is mapped to the onboard oscillator.
         -> ClockSource -- ^ Output clock source.
ice40pll rst speed clk = common (modname speed) where
  modname PLL_16MHZ  = "ice40_pll16mhz"
  modname PLL_50MHZ  = "ice40_pll50mhz"
  modname PLL_60MHZ  = "ice40_pll60mhz"
  modname PLL_100MHZ = "ice40_pll100mhz"
  modname PLL_120MHZ = "ice40_pll120mhz"
  modname PLL_200MHZ = "ice40_pll200mhz"
  modname PLL_270MHZ = "ice40_pll270mhz"

  common comp = ClockSource
    { c_name  = comp
    , c_inp   = [ ("clk", clk) ]
    , c_outp  = [ ("clkout", show systemClock) ]
    , c_reset = Just ("reset", rst)
    , c_lock  = "locked"
    , c_sync  = False
    }

-- | Print out extra Verilog code needed to drive the iCE40 PLL. This is
-- necessary due to some limitations in the current version of CLaSH; you should
-- run this function to generate the necessary `.v` file to include in your
-- project synthesis.
printPllVerilog :: IO ()
printPllVerilog = putStr extraVerilog

extraVerilog :: String
extraVerilog = $(embedStringFile "CLaSH/Lattice/ice40.v")
